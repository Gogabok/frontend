# Disable returning Nginx version.
server_tokens  off;

# Declare HTTP scheme variable that contains correct value
# both for direct and through reverse-proxy (with SSL termination) requests.
map $http_x_forwarded_proto $proto {
  default  $scheme;
  https    https;
  http     http;
}
# Declares variable that contains requested hostname without `www.` part.
map $host $host_without_www {
  default              $host;
  "~*^www\.(?<h>.+)$"  $h;
}
# Declares variable that contains a value of the `Connection` header depending
# on the presence of the `Upgrade` field in the client request header.
map $http_upgrade $connection_upgrade {
  default  upgrade;
  ""       close;
}

# Permanent redirection from 'www' to 'non-www'.
server {
  listen         80;
  server_name    www.*;
  return         301 $proto://$host_without_www$request_uri;
}

# Default server to serve frontend application.
server {
  listen         80 default_server;
  server_name    _;

  absolute_redirect    off;

  root           /var/www/public;
  index          index.html;
  charset        utf-8;

  client_max_body_size    30m;

  # Custom error pages.
  error_page    403    /403;
  error_page    404    /404;
  error_page    500    /500;

  include mime.types;
  types {
    "application/wasm" wasm;
  }

  location / {
    # Handle search engines to use SSR.
    if ($http_user_agent ~* "bot|crawl|slurp|spider") {
       proxy_pass    http://127.0.0.1:8080;
    }
    try_files    $uri $uri/ /index.html;
  }

  location /hot/ {
    try_files    $uri =404;
  }

  # TODO: remove?
  location = /index.html {}

  # These rules are for Docker Compose only and are never triggered in
  # Kubernetes Pod due to Ingress routing rules.
  location ^~ /api/ {
    resolver            127.0.0.11 valid=30s;
    set                 $upstream backend-api:7777;
    rewrite             ^/api/(.*) /$1  break;
    proxy_pass          http://$upstream$uri$is_args$args;
    proxy_set_header    Host $host;
  }
  #location ^~ /ws {
  #  proxy_pass            http://backend-api:8082;
  #  proxy_http_version    1.1;
  #  proxy_set_header      Upgrade $http_upgrade;
  #  proxy_set_header      Connection $connection_upgrade;
  #}

  # These rules are for Docker Compose only and are never triggered in
  # Kubernetes Pod due to Ingress routing rules.
  location ^~ /mock-api {
    proxy_pass    http://127.0.0.1:8085;
  }
  location ^~ /mock-ws {
    proxy_pass            http://127.0.0.1:8086;
    proxy_http_version    1.1;
    proxy_set_header      Upgrade $http_upgrade;
    proxy_set_header      Connection $connection_upgrade;
  }
  location ^~ /media-ws {
    proxy_pass            http://127.0.0.1:1100;
    proxy_http_version    1.1;
    proxy_set_header      Upgrade $http_upgrade;
    proxy_set_header      Connection $connection_upgrade;
  }

  # These rules are for Docker Compose only and are never triggered in
  # Kubernetes Pod due to Ingress routing rules.
  location ^~ /medea/ {
    resolver              127.0.0.11 valid=30s;
    set                   $upstream medea:8090;
    rewrite               ^/medea/(.*) /$1  break;
    proxy_pass            http://$upstream$uri$is_args$args;
    proxy_http_version    1.1;
    proxy_set_header      Host $host;
    proxy_set_header      Upgrade $http_upgrade;
    proxy_set_header      Connection $connection_upgrade;
  }
  location ^~ /medea-control-mock/ {
    resolver              127.0.0.11 valid=30s;
    set                   $upstream medea-control-mock:8095;
    rewrite               ^/medea-control-mock/(.*) /$1  break;
    proxy_pass            http://$upstream$uri$is_args$args;
    proxy_http_version    1.1;
    proxy_set_header      Host $host;
    proxy_set_header      Upgrade $http_upgrade;
    proxy_set_header      Connection $connection_upgrade;
  }

  # These rules are for Docker Compose only and are never triggered in
  # Kubernetes Pod due to Ingress routing rules.
  location ^~ /files/ {
    root    /var/www-files;
  }

  # Disable unnecessary access logs.
  location = /robots.txt {
    allow            all;
    access_log       off;
    log_not_found    off;
  }
  location = /sitemap.xml {
    access_log       off;
    log_not_found    off;
  }
  location = /favicon.ico {
    access_log       off;
  }
}
